{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Balancer Lib - function for Balancer Models Calculations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Balancer Lib - function for Balancer Models Calculations')\n",
    "print('pool_from_ratio(ratio, datas, step, value, n) - return pool[]')\n",
    "def pool_from_ratio(ratio, datas, step, value, n):# ratio = [], datas, step,total value of pool, n\n",
    "    arr=[0]*n\n",
    "    for i in range(0,n,1):\n",
    "        arr[i]=value*ratio[i]/datas[step][i]\n",
    "    return arr\n",
    "#----------------\n",
    "def constanta (pool, weights):\n",
    "    k=1\n",
    "    for i in range(0,4,1):\n",
    "        k=k*(pool[i]**weights[i])\n",
    "    return k\n",
    "print ( 'constanta(pool, weights) - return K') # for check\n",
    "#k=constanta (pool, weights)\n",
    "    #------------------------------\n",
    "def value(pool, datas, step):\n",
    "    v=0\n",
    "    for i in range(0,4,1):\n",
    "        v=v+pool[i]*datas[step][i]\n",
    "    return v\n",
    "print ('value(pool, datas, step) - return value') # for check\n",
    "#print ('value step = 12 = ', value(pool, datas, 12)) # for check\n",
    "#------------\n",
    "def value1(pool, prices):\n",
    "    v=0\n",
    "    for i in range(0,4,1):\n",
    "        v=v+pool[i]*prices[i]\n",
    "    return v\n",
    "#print ('value1 using prices = ', value1(pool, pool1)) # for check\n",
    "#print ('v2_1 = ', value1(pool, pr0)) # for check\n",
    "#--------------------------\n",
    "def marketprices(datas, step, n):\n",
    "    p=[0]*n\n",
    "    for i in range(0,n,1):\n",
    "        p[i]=datas[step][i]\n",
    "    \n",
    "    return p\n",
    "#print ('marketprices in USD = ', marketprices( datas, 1, n)) # for check\n",
    "\n",
    "#---------------------\n",
    "def spotprices6(pool, weights):#01/02/03/12/13/23\n",
    "    sp=[0,0,0,0,0,0]\n",
    "    count=0\n",
    "    arr=[]\n",
    "    for i in range(0,4,1):\n",
    "        for j in range(0,4,1):\n",
    "            if i!=j and i<j:\n",
    "                sp[count]=pool[i]*weights[j]/pool[j]/weights[i]\n",
    "                count=count+1\n",
    "    return sp\n",
    "#print('spotprices6= ', spotprices6(pool, weights))\n",
    "#---------------------------\n",
    "def marketprices6(datas, step, n):#01/02/03/12/13/23\n",
    "    mp=[0,0,0,0,0,0]\n",
    "    count=0\n",
    "\n",
    "    for i in range(0,n,1):\n",
    "        for j in range(0,n,1):  \n",
    "            if i!=j and i<j:\n",
    "                mp[count]=datas[step][j]/datas[step][i]\n",
    "                count=count+1\n",
    "    return mp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#---------------\n",
    "def calc_out_given_in(pool, weights, fee, amount, dir_in, dir_out):\n",
    "    #print(dir_in, dir_out)\n",
    "    k=constanta (pool, weights) \n",
    "    totalfee=[0,0,0,0]\n",
    "    a1=5\n",
    "    a2=5\n",
    "    for i in range(0,4,1):\n",
    "        if (i!=int(dir_in)) and (i!=int(dir_out)):\n",
    "            if a1!=5 and a2==5:\n",
    "                a2=i\n",
    "            if a1==5:\n",
    "                a1=i\n",
    "    out=pool[dir_out] - (k/((pool[dir_in]+amount*(1-fee))**weights[dir_in])/(pool[a1]**weights[a1])/(pool[a2]**weights[a2]))**(1/weights[dir_out])\n",
    "    return [out, dir_out, amount, dir_in]#out, dir_out,amount_in, dir_in\n",
    "#print('calc_out_given_in = ', calc_out_given_in(pool, weights, fee, 1, 0, 1))#pool, weights, fee, amount, dir_in, dir_out, totalfee\n",
    "#---------------------------\n",
    "#Function for computing the difference between market and spot prices\n",
    "def calc_price_difference(pool, weights1, datas, step):#(new pool, marketprices, step, dw-step for change weights)=> new weigths\n",
    "    \n",
    "    pair=[[0,1],[0,2],[0,3], [1,2], [1,3],[2,3]]\n",
    "    mp=marketprices6(datas,step, n)\n",
    "    #print('mp= ',mp)\n",
    "    sp=spotprices6(pool, weights1)\n",
    "    diff = [0]*6\n",
    "    mod_res=0\n",
    "    res=0\n",
    "    index_res=-1\n",
    "    \n",
    "    for i in range (0, 6, 1):\n",
    "        diff[i]=mp[i]-sp[i]\n",
    "        if abs(diff[i])>mod_res:\n",
    "            mod_res=abs(diff[i])\n",
    "            res=diff[i]\n",
    "            index_res=i\n",
    "    #print('d_difference=', diff)\n",
    "    return [res, pair[index_res]]#max price diffrence and pair \n",
    "#-----------\n",
    "#Function for computing new weights for new pool state\n",
    "def calc_new_weights(pool, weights1, datas, step, step_weight, acc):\n",
    "    diff= calc_price_difference(pool, weights1, datas, step)\n",
    "    counter=0\n",
    "    while (abs(diff[0])>acc and (counter<1000)):\n",
    "    \n",
    "        counter=counter+1\n",
    "        #print('diff = ', diff)\n",
    "        #d1=diff[0]\n",
    "        #print('step_weight= ', step_weight)\n",
    "        if diff[0]>0:\n",
    "            \n",
    "            weights1[diff[1][0]]=weights1[diff[1][0]]-step_weight\n",
    "            weights1[diff[1][1]]=weights1[diff[1][1]]+step_weight\n",
    "        if diff[0]<0:\n",
    "            \n",
    "            weights1[diff[1][0]]=weights1[diff[1][0]]+step_weight\n",
    "            weights1[diff[1][1]]=weights1[diff[1][1]]-step_weight\n",
    "        diff= calc_price_difference(pool, weights1, datas, step)\n",
    "        if counter >200:  \n",
    "            step_weight=step_weight/2\n",
    "    return weights1\n",
    "#--------------------\n",
    "#function for calc diffrence between two pools\n",
    "def delta_pool(pool, pool1, n):\n",
    "    arr=[0]*n\n",
    "    for i in range(0,n,1):\n",
    "        arr[i]=pool1[i]-pool[i]\n",
    "    return arr\n",
    "#------------------------\n",
    "#calc new pool from old pool and new ratio\n",
    "def calc_new_pool(pool, ratio, datas, step,  n):\n",
    "    val= value(pool, datas, step)\n",
    "    arr=pool_from_ratio(ratio, datas, step, val, n)\n",
    "    return arr\n",
    "#------------------------\n",
    "#calc diffrence in value between two pools \n",
    "def delta_value(pool, pool1, datas, step, n):\n",
    "    del1=value(pool1, datas, step)- value(pool, datas, step)\n",
    "    return del1\n",
    "#-----------------\n",
    "def deltaForSwap(pool, pool1, weights, datas, step, fee):\n",
    "    #pair=[[0,1],[0,2],[0,3], [1,2], [1,3],[2,3]]\n",
    "    diff=calc_price_difference(pool, weights, datas, step)\n",
    "    amount_in=0\n",
    "    token_in=-1\n",
    "    token_out=-1\n",
    "    if diff[0]>0:\n",
    "        token_in = diff[1][0]\n",
    "        token_out= diff[1][1]\n",
    "        amount_in= abs((pool1[diff[1][0]]-pool[diff[1][0]])*(1+fee))\n",
    "    else:        \n",
    "        token_in = diff[1][1]\n",
    "        token_out= diff[1][0]\n",
    "        amount_in= abs((pool1[diff[1][1]]-pool[diff[1][1]])*(1+fee))\n",
    "    return (token_in, token_out, amount_in )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function for swap\n",
    "def swap(pool,fee, dir_in, dir_out, amount_in, amount_out):\n",
    "    comm=[0]*len(pool)\n",
    "    #tot_fee=0\n",
    "    pool[dir_in]=pool[dir_in]+amount_in\n",
    "    pool[dir_out]=pool[dir_out]-amount_our\n",
    "    comm[dir_in]=amount_in*fee\n",
    "    return [pool, comm]\n",
    "#---------------\n",
    "def random_ratio(n):\n",
    "    arr=[0]*n\n",
    "    arr[0]=random.randrange(0,0.4,0.001)\n",
    "    arr[1]=random.randrange(0,0.4,0.001)\n",
    "    arr[2]=random.randrange(0,(1-arr[1]-arr[0]),0.001)\n",
    "    arr[2]=random.randrange(0,(1-arr[1]-arr[0]-arr[2]),0.001)", 
        "    return arr\n",
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
